//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Passport.Utility.Clients.Alexandria
{
#pragma warning disable

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class CompetitionsClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public CompetitionsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get all active Competitions</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FileResponse> GetrActiveCompetitionsAsync()
    {
      return GetrActiveCompetitionsAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get all active Competitions</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<FileResponse> GetrActiveCompetitionsAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/competitions/active");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200" || status_ == "206")
            {
              var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
              var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
              client_ = null; response_ = null; // response and client are disposed by FileResponse
              return fileResponse_;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get Competition by Id</summary>
    /// <param name="competitionId">GUID of the competition</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FileResponse> GetCompetitionDetailAsync(System.Guid competitionId)
    {
      return GetCompetitionDetailAsync(competitionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get Competition by Id</summary>
    /// <param name="competitionId">GUID of the competition</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<FileResponse> GetCompetitionDetailAsync(System.Guid competitionId, System.Threading.CancellationToken cancellationToken)
    {
      if (competitionId == null)
        throw new System.ArgumentNullException("competitionId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/competitions/{competitionId}");
      urlBuilder_.Replace("{competitionId}", System.Uri.EscapeDataString(ConvertToString(competitionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200" || status_ == "206")
            {
              var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
              var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
              client_ = null; response_ = null; // response and client are disposed by FileResponse
              return fileResponse_;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get competition by name
    /// This will automatically add the leading slash ('/')</summary>
    /// <param name="competitionName">Name without the leading slash (ex: `heroes-open` will become `/heroes-open`)</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FileResponse> GetCompetitionDetailByNameAsync(string competitionName)
    {
      return GetCompetitionDetailByNameAsync(competitionName, System.Threading.CancellationToken.None);
    }

    /// <summary>Get competition by name
    /// This will automatically add the leading slash ('/')</summary>
    /// <param name="competitionName">Name without the leading slash (ex: `heroes-open` will become `/heroes-open`)</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<FileResponse> GetCompetitionDetailByNameAsync(string competitionName, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/competitions/by-name/{competitionName}");
      urlBuilder_.Replace("{competitionName}", System.Uri.EscapeDataString(ConvertToString(competitionName, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200" || status_ == "206")
            {
              var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
              var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
              client_ = null; response_ = null; // response and client are disposed by FileResponse
              return fileResponse_;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamsClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FileResponse> GetTeamDetailAsync(System.Guid teamId)
    {
      return GetTeamDetailAsync(teamId, System.Threading.CancellationToken.None);
    }

    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<FileResponse> GetTeamDetailAsync(System.Guid teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200" || status_ == "206")
            {
              var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
              var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
              client_ = null; response_ = null; // response and client are disposed by FileResponse
              return fileResponse_;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Disbands the specified team
    /// Required Permissions: `team::{teamId}::disband`</summary>
    /// <param name="teamId">Targeted TeanUd</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FileResponse> DisbandTeamAsync(System.Guid teamId)
    {
      return DisbandTeamAsync(teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Disbands the specified team
    /// Required Permissions: `team::{teamId}::disband`</summary>
    /// <param name="teamId">Targeted TeanUd</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<FileResponse> DisbandTeamAsync(System.Guid teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200" || status_ == "206")
            {
              var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
              var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
              client_ = null; response_ = null; // response and client are disposed by FileResponse
              return fileResponse_;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>This will create a UserProfile after an Account has been established in Passport</summary>
    /// <param name="payload">The User Account Information</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task CreateProfileAsync(UserProfileCreate payload)
    {
      return CreateProfileAsync(payload, System.Threading.CancellationToken.None);
    }

    /// <summary>This will create a UserProfile after an Account has been established in Passport</summary>
    /// <param name="payload">The User Account Information</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task CreateProfileAsync(UserProfileCreate payload, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user-profiles");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get the UserProfile of the logged in User</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<UserProfileDetail> GetUserProfileAsync()
    {
      return GetUserProfileAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get the UserProfile of the logged in User</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<UserProfileDetail> GetUserProfileAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user-profiles");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(UserProfileDetail);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileDetail>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(UserProfileDetail);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileInvitesClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileInvitesClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get the Invites for the logged in user</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamTeamInvite>> GetInvitesAsync()
    {
      return GetInvitesAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get the Invites for the logged in user</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamTeamInvite>> GetInvitesAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user-profile/invites");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<TeamTeamInvite>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<TeamTeamInvite>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<TeamTeamInvite>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Decline the targeted invite
    /// Reqyured Permissions: `invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task DeclineInviteAsync(System.Guid inviteId)
    {
      return DeclineInviteAsync(inviteId, System.Threading.CancellationToken.None);
    }

    /// <summary>Decline the targeted invite
    /// Reqyured Permissions: `invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task DeclineInviteAsync(System.Guid inviteId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user-profile/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Accept the targeted invite
    /// Reqyured Permissions: `invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the targeted invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task AcceptInviteAsync(System.Guid inviteId)
    {
      return AcceptInviteAsync(inviteId, System.Threading.CancellationToken.None);
    }

    /// <summary>Accept the targeted invite
    /// Reqyured Permissions: `invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the targeted invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task AcceptInviteAsync(System.Guid inviteId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user-profile/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("PUT");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileMembershipsClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileMembershipsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task RemoveMembershipAsync(System.Guid membershipId)
    {
      return RemoveMembershipAsync(membershipId, System.Threading.CancellationToken.None);
    }

    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task RemoveMembershipAsync(System.Guid membershipId, System.Threading.CancellationToken cancellationToken)
    {
      if (membershipId == null)
        throw new System.ArgumentNullException("membershipId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user-profile/memberships/{membershipId}");
      urlBuilder_.Replace("{membershipId}", System.Uri.EscapeDataString(ConvertToString(membershipId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamInvitesClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamInvitesClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get Invites for the given team
    /// Permissions Required: `team::{teamId}::invite--send`</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserProfileTeamInvite>> GetTeamInvitesAsync(string teamId)
    {
      return GetTeamInvitesAsync(teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get Invites for the given team
    /// Permissions Required: `team::{teamId}::invite--send`</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserProfileTeamInvite>> GetTeamInvitesAsync(string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}/invites");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<UserProfileTeamInvite>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<UserProfileTeamInvite>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<UserProfileTeamInvite>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Send Invite to a User via Email or UserName</summary>
    /// <param name="payload">The qualifying Email or UserName ({displayName}#{number})</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task SendInviteAsync(TeamInviteRequest payload, string teamId)
    {
      return SendInviteAsync(payload, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Send Invite to a User via Email or UserName</summary>
    /// <param name="payload">The qualifying Email or UserName ({displayName}#{number})</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task SendInviteAsync(TeamInviteRequest payload, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}/invites");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Resends an existing invite
    /// Required Permissions: `team::{teamId}::invite--send`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ResendInviteAsync(System.Guid inviteId, string teamId)
    {
      return ResendInviteAsync(inviteId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Resends an existing invite
    /// Required Permissions: `team::{teamId}::invite--send`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task ResendInviteAsync(System.Guid inviteId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Revokes an Invite
    /// Required permissions: `team::{teamId}::invite--revoke`</summary>
    /// <param name="inviteId">GUID of the invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task RevokeInviteAsync(System.Guid inviteId, string teamId)
    {
      return RevokeInviteAsync(inviteId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Revokes an Invite
    /// Required permissions: `team::{teamId}::invite--revoke`</summary>
    /// <param name="inviteId">GUID of the invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task RevokeInviteAsync(System.Guid inviteId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamMembershipClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamMembershipClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Remove a Member from a Team</summary>
    /// <param name="membershipId">GUID of the Membership</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<FileResponse> RemoveMemberAsync(System.Guid membershipId, string teamId)
    {
      return RemoveMemberAsync(membershipId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Remove a Member from a Team</summary>
    /// <param name="membershipId">GUID of the Membership</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<FileResponse> RemoveMemberAsync(System.Guid membershipId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (membershipId == null)
        throw new System.ArgumentNullException("membershipId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{teamId}/memberships/{membershipId}");
      urlBuilder_.Replace("{membershipId}", System.Uri.EscapeDataString(ConvertToString(membershipId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200" || status_ == "206")
            {
              var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
              var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
              client_ = null; response_ = null; // response and client are disposed by FileResponse
              return fileResponse_;
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(FileResponse);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class CompetitionTeamsClient
  {
    private string _baseUrl = "https://api.slash.gg";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public CompetitionTeamsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Create a Team for a Competition</summary>
    /// <param name="payload">Team Payload</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task CreateTeamAsync(TeamCreate payload, string competitionId)
    {
      return CreateTeamAsync(payload, competitionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Create a Team for a Competition</summary>
    /// <param name="payload">Team Payload</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task CreateTeamAsync(TeamCreate payload, string competitionId, System.Threading.CancellationToken cancellationToken)
    {
      if (competitionId == null)
        throw new System.ArgumentNullException("competitionId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/competitions/{competitionId}/teams");
      urlBuilder_.Replace("{competitionId}", System.Uri.EscapeDataString(ConvertToString(competitionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }



  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class BaseError
  {
    [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Error { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseError FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileCreate
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileCreate FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileCreate>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileDetail
  {
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    [Newtonsoft.Json.JsonProperty("avatarURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AvatarURL { get; set; }

    [Newtonsoft.Json.JsonProperty("memberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, TeamTeamMembership> Memberships { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamTeamMembership
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid TeamId { get; set; }

    [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TeamName { get; set; }

    [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Role { get; set; }

    [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Permissions { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamTeamMembership FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamTeamMembership>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class ProblemDetails
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProblemDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamTeamInvite
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset CreatedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid TeamId { get; set; }

    [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Team { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    public InviteState State { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamTeamInvite FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamTeamInvite>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum InviteState
  {
    Pending = 1,

    Accepted = 2,

    Declined = 3,

    Withdrawn = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileTeamInvite
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset CreatedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    public InviteState State { get; set; }

    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileTeamInvite FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileTeamInvite>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamInviteRequest
  {
    [Newtonsoft.Json.JsonProperty("invitee", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Invitee { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamInviteRequest FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamInviteRequest>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.10.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamCreate
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("invites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Invites { get; set; }

    [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Abbreviation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamCreate FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamCreate>(data);
    }

  }

  public partial class FileResponse : System.IDisposable
  {
    private System.IDisposable _client;
    private System.IDisposable _response;

    public int StatusCode { get; private set; }

    public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public System.IO.Stream Stream { get; private set; }

    public bool IsPartial
    {
      get { return StatusCode == 206; }
    }

    public FileResponse(int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
    {
      StatusCode = statusCode;
      Headers = headers;
      Stream = stream;
      _client = client;
      _response = response;
    }

    public void Dispose()
    {
      if (Stream != null)
        Stream.Dispose();
      if (_response != null)
        _response.Dispose();
      if (_client != null)
        _client.Dispose();
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class SwaggerException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class SwaggerException<TResult> : SwaggerException
  {
    public TResult Result { get; private set; }

    public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
      Result = result;
    }
  }

#pragma warning restore
}