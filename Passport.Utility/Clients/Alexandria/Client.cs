//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Passport.Utility.Clients.Alexandria
{
#pragma warning disable

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class CompetitionsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public CompetitionsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get all active Competitions</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompetitionDetail>> GetActiveCompetitionsAsync()
    {
      return GetActiveCompetitionsAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get all active Competitions</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompetitionDetail>> GetActiveCompetitionsAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("competitions/active");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<CompetitionDetail>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<CompetitionDetail>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<CompetitionDetail>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get Competition by Id</summary>
    /// <param name="competitionId">GUID of the competition</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<CompetitionDetail> GetCompetitionDetailAsync(System.Guid competitionId)
    {
      return GetCompetitionDetailAsync(competitionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get Competition by Id</summary>
    /// <param name="competitionId">GUID of the competition</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<CompetitionDetail> GetCompetitionDetailAsync(System.Guid competitionId, System.Threading.CancellationToken cancellationToken)
    {
      if (competitionId == null)
        throw new System.ArgumentNullException("competitionId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("competitions/{competitionId}");
      urlBuilder_.Replace("{competitionId}", System.Uri.EscapeDataString(ConvertToString(competitionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(CompetitionDetail);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionDetail>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(CompetitionDetail);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get competition by slug</summary>
    /// <param name="competitionSlug">Slug of the competiiton</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<CompetitionDetail> GetCompetitionDetailBySlugAsync(string competitionSlug)
    {
      return GetCompetitionDetailBySlugAsync(competitionSlug, System.Threading.CancellationToken.None);
    }

    /// <summary>Get competition by slug</summary>
    /// <param name="competitionSlug">Slug of the competiiton</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<CompetitionDetail> GetCompetitionDetailBySlugAsync(string competitionSlug, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("competitions/by-slug/{competitionSlug}");
      urlBuilder_.Replace("{competitionSlug}", System.Uri.EscapeDataString(ConvertToString(competitionSlug, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(CompetitionDetail);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionDetail>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(CompetitionDetail);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get Team Details</summary>
    /// <param name="teamId">GUID of the team</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<TeamDetail> GetTeamDetailAsync(System.Guid teamId)
    {
      return GetTeamDetailAsync(teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get Team Details</summary>
    /// <param name="teamId">GUID of the team</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<TeamDetail> GetTeamDetailAsync(System.Guid teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(TeamDetail);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TeamDetail>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(TeamDetail);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Disbands the specified team
    /// Required Permissions: `team::{teamId}::disband`</summary>
    /// <param name="teamId">Targeted TeanUd</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task DisbandTeamAsync(System.Guid teamId)
    {
      return DisbandTeamAsync(teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Disbands the specified team
    /// Required Permissions: `team::{teamId}::disband`</summary>
    /// <param name="teamId">Targeted TeanUd</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task DisbandTeamAsync(System.Guid teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>This will create a UserProfile after an Account has been established in Passport</summary>
    /// <param name="payload">The User Account Information</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task CreateProfileAsync(UserProfileCreate payload)
    {
      return CreateProfileAsync(payload, System.Threading.CancellationToken.None);
    }

    /// <summary>This will create a UserProfile after an Account has been established in Passport</summary>
    /// <param name="payload">The User Account Information</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task CreateProfileAsync(UserProfileCreate payload, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profiles");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "409")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get the UserProfile of the logged in User</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<UserProfileDetail> GetUserProfileAsync()
    {
      return GetUserProfileAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get the UserProfile of the logged in User</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<UserProfileDetail> GetUserProfileAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profiles");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(UserProfileDetail);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileDetail>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(UserProfileDetail);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get the Permissions for the logged in User</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync()
    {
      return GetPermissionsAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get the Permissions for the logged in User</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profiles/permissions");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<string>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<string>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileConnectionsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileConnectionsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get the connections of the currently logged in user.</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserProfileConnectionDetail>> GetConnectionsAsync()
    {
      return GetConnectionsAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get the connections of the currently logged in user.</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserProfileConnectionDetail>> GetConnectionsAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/connections");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<UserProfileConnectionDetail>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<UserProfileConnectionDetail>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<UserProfileConnectionDetail>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Creates the given connection. Requires the @slashgg/alexandria.backchannel scope.</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task CreateConnectionAsync(UserProfileCreateConnection createDto)
    {
      return CreateConnectionAsync(createDto, System.Threading.CancellationToken.None);
    }

    /// <summary>Creates the given connection. Requires the @slashgg/alexandria.backchannel scope.</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task CreateConnectionAsync(UserProfileCreateConnection createDto, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/connections");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createDto, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Deletes the connection
    /// Requires permission: `external-account::{connectionId}::delete`.
    /// This method is idempotent.</summary>
    /// <param name="connectionId">GUID of the connection to delete</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task DeleteConnectionAsync(string connectionId)
    {
      return DeleteConnectionAsync(connectionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Deletes the connection
    /// Requires permission: `external-account::{connectionId}::delete`.
    /// This method is idempotent.</summary>
    /// <param name="connectionId">GUID of the connection to delete</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task DeleteConnectionAsync(string connectionId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/connections/{connectionId}");
      urlBuilder_.Replace("{connectionId}", System.Uri.EscapeDataString(ConvertToString(connectionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileInvitesClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileInvitesClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get the Invites for the logged in user</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamTeamInvite>> GetInvitesAsync()
    {
      return GetInvitesAsync(System.Threading.CancellationToken.None);
    }

    /// <summary>Get the Invites for the logged in user</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamTeamInvite>> GetInvitesAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/invites");

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<TeamTeamInvite>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<TeamTeamInvite>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<TeamTeamInvite>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Decline the targeted invite
    /// Reqyured Permissions: `team-invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task DeclineInviteAsync(System.Guid inviteId)
    {
      return DeclineInviteAsync(inviteId, System.Threading.CancellationToken.None);
    }

    /// <summary>Decline the targeted invite
    /// Reqyured Permissions: `team-invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task DeclineInviteAsync(System.Guid inviteId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "422")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Accept the targeted invite
    /// Reqyured Permissions: `team-invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the targeted invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task AcceptInviteAsync(System.Guid inviteId)
    {
      return AcceptInviteAsync(inviteId, System.Threading.CancellationToken.None);
    }

    /// <summary>Accept the targeted invite
    /// Reqyured Permissions: `team-invite::{inviteId}::handle`</summary>
    /// <param name="inviteId">GUID of the targeted invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task AcceptInviteAsync(System.Guid inviteId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("PUT");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "409")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "410")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "422")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class UserProfileMembershipsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserProfileMembershipsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task RemoveMembershipAsync(System.Guid membershipId)
    {
      return RemoveMembershipAsync(membershipId, System.Threading.CancellationToken.None);
    }

    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task RemoveMembershipAsync(System.Guid membershipId, System.Threading.CancellationToken cancellationToken)
    {
      if (membershipId == null)
        throw new System.ArgumentNullException("membershipId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("user-profile/memberships/{membershipId}");
      urlBuilder_.Replace("{membershipId}", System.Uri.EscapeDataString(ConvertToString(membershipId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "422")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "423")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TournamentApplicationsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TournamentApplicationsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get the ApplicationData for a Tournament</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<CompetitionTournamentApplication> GetApplicationAsync(string tournamentId)
    {
      return GetApplicationAsync(tournamentId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get the ApplicationData for a Tournament</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<CompetitionTournamentApplication> GetApplicationAsync(string tournamentId, System.Threading.CancellationToken cancellationToken)
    {
      if (tournamentId == null)
        throw new System.ArgumentNullException("tournamentId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("tournaments/{tournamentId}/applications");
      urlBuilder_.Replace("{tournamentId}", System.Uri.EscapeDataString(ConvertToString(tournamentId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(CompetitionTournamentApplication);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionTournamentApplication>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(CompetitionTournamentApplication);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamInvitesClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamInvitesClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get Invites for the given team
    /// Permissions Required: `team::{teamId}::invite--send`</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserProfileTeamInvite>> GetTeamInvitesAsync(string teamId)
    {
      return GetTeamInvitesAsync(teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get Invites for the given team
    /// Permissions Required: `team::{teamId}::invite--send`</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserProfileTeamInvite>> GetTeamInvitesAsync(string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/invites");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<UserProfileTeamInvite>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<UserProfileTeamInvite>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<UserProfileTeamInvite>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Send Invite to a User via Email or UserName</summary>
    /// <param name="payload">The qualifying Email or UserName ({displayName}#{number})</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task SendInviteAsync(TeamInviteRequest payload, string teamId)
    {
      return SendInviteAsync(payload, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Send Invite to a User via Email or UserName</summary>
    /// <param name="payload">The qualifying Email or UserName ({displayName}#{number})</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task SendInviteAsync(TeamInviteRequest payload, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/invites");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "409")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "422")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Resends an existing invite
    /// Required Permissions: `team::{teamId}::invite--send`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ResendInviteAsync(System.Guid inviteId, string teamId)
    {
      return ResendInviteAsync(inviteId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Resends an existing invite
    /// Required Permissions: `team::{teamId}::invite--send`</summary>
    /// <param name="inviteId">GUID of the Invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task ResendInviteAsync(System.Guid inviteId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Revokes an Invite
    /// Required permissions: `team::{teamId}::invite--revoke`</summary>
    /// <param name="inviteId">GUID of the invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task RevokeInviteAsync(System.Guid inviteId, string teamId)
    {
      return RevokeInviteAsync(inviteId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Revokes an Invite
    /// Required permissions: `team::{teamId}::invite--revoke`</summary>
    /// <param name="inviteId">GUID of the invite</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task RevokeInviteAsync(System.Guid inviteId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (inviteId == null)
        throw new System.ArgumentNullException("inviteId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/invites/{inviteId}");
      urlBuilder_.Replace("{inviteId}", System.Uri.EscapeDataString(ConvertToString(inviteId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamMembershipClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamMembershipClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Remove a Member from a Team</summary>
    /// <param name="membershipId">GUID of the Membership</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task RemoveMemberAsync(System.Guid membershipId, string teamId)
    {
      return RemoveMemberAsync(membershipId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Remove a Member from a Team</summary>
    /// <param name="membershipId">GUID of the Membership</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task RemoveMemberAsync(System.Guid membershipId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (membershipId == null)
        throw new System.ArgumentNullException("membershipId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/memberships/{membershipId}");
      urlBuilder_.Replace("{membershipId}", System.Uri.EscapeDataString(ConvertToString(membershipId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "422")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "423")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class TeamTournamentApplicationsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public TeamTournamentApplicationsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get a Teams Tournament Application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentId">Guid of the Tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<TournamentTournamentApplication> GetTournamentApplicationAsync(System.Guid tournamentId, string teamId)
    {
      return GetTournamentApplicationAsync(tournamentId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get a Teams Tournament Application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentId">Guid of the Tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<TournamentTournamentApplication> GetTournamentApplicationAsync(System.Guid tournamentId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (tournamentId == null)
        throw new System.ArgumentNullException("tournamentId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/tournament-applications/{tournamentId}");
      urlBuilder_.Replace("{tournamentId}", System.Uri.EscapeDataString(ConvertToString(tournamentId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(TournamentTournamentApplication);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentTournamentApplication>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(TournamentTournamentApplication);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Withdraw a tournament application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentId">Guid of the tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task WithdrawApplicationAsync(System.Guid tournamentId, string teamId)
    {
      return WithdrawApplicationAsync(tournamentId, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Withdraw a tournament application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentId">Guid of the tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task WithdrawApplicationAsync(System.Guid tournamentId, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (tournamentId == null)
        throw new System.ArgumentNullException("tournamentId");

      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/tournament-applications/{tournamentId}");
      urlBuilder_.Replace("{tournamentId}", System.Uri.EscapeDataString(ConvertToString(tournamentId, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get a Teams Tournament Application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentSlug">Slug of the tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<TournamentTournamentApplication> GetTournamentApplication2Async(string tournamentSlug, string teamId)
    {
      return GetTournamentApplication2Async(tournamentSlug, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get a Teams Tournament Application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentSlug">Slug of the tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<TournamentTournamentApplication> GetTournamentApplication2Async(string tournamentSlug, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/tournament-applications/by-slug/{tournamentSlug}");
      urlBuilder_.Replace("{tournamentSlug}", System.Uri.EscapeDataString(ConvertToString(tournamentSlug, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(TournamentTournamentApplication);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentTournamentApplication>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(TournamentTournamentApplication);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Withdraw a tournament application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentSlug">Slug of the tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task WithdrawApplication2Async(string tournamentSlug, string teamId)
    {
      return WithdrawApplication2Async(tournamentSlug, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Withdraw a tournament application
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="tournamentSlug">Slug of the tournament</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task WithdrawApplication2Async(string tournamentSlug, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/tournament-applications/by-slug/{tournamentSlug}");
      urlBuilder_.Replace("{tournamentSlug}", System.Uri.EscapeDataString(ConvertToString(tournamentSlug, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "204")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Apply to a Tournament
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="payload">Creation Object for Team Application</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApplyToTournamentAsync(TournamentTeamTournamentApplicationRequest payload, string teamId)
    {
      return ApplyToTournamentAsync(payload, teamId, System.Threading.CancellationToken.None);
    }

    /// <summary>Apply to a Tournament
    /// Required Permissions: `team::{teamId}::tournament--join`</summary>
    /// <param name="payload">Creation Object for Team Application</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task ApplyToTournamentAsync(TournamentTeamTournamentApplicationRequest payload, string teamId, System.Threading.CancellationToken cancellationToken)
    {
      if (teamId == null)
        throw new System.ArgumentNullException("teamId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("teams/{teamId}/tournament-applications");
      urlBuilder_.Replace("{teamId}", System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "401")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(ProblemDetails);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<ProblemDetails>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "423")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class CompetitionTournamentsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public CompetitionTournamentsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Get the tournaments for this competition</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompetitionTournamentDetail>> GetTournamentsForCompetitionAsync(string competitionId)
    {
      return GetTournamentsForCompetitionAsync(competitionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get the tournaments for this competition</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompetitionTournamentDetail>> GetTournamentsForCompetitionAsync(string competitionId, System.Threading.CancellationToken cancellationToken)
    {
      if (competitionId == null)
        throw new System.ArgumentNullException("competitionId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("competitions/{competitionId}/tournaments");
      urlBuilder_.Replace("{competitionId}", System.Uri.EscapeDataString(ConvertToString(competitionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<CompetitionTournamentDetail>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<CompetitionTournamentDetail>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<CompetitionTournamentDetail>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    /// <summary>Get the currently tournaments open for application for this competition</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompetitionTournamentApplication>> GetOpenApplicationsAsync(string competitionId)
    {
      return GetOpenApplicationsAsync(competitionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Get the currently tournaments open for application for this competition</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompetitionTournamentApplication>> GetOpenApplicationsAsync(string competitionId, System.Threading.CancellationToken cancellationToken)
    {
      if (competitionId == null)
        throw new System.ArgumentNullException("competitionId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("competitions/{competitionId}/tournaments/appplications");
      urlBuilder_.Replace("{competitionId}", System.Uri.EscapeDataString(ConvertToString(competitionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "200")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(System.Collections.Generic.ICollection<CompetitionTournamentApplication>);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<CompetitionTournamentApplication>>(responseData_, _settings.Value);
                return result_;
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }

            return default(System.Collections.Generic.ICollection<CompetitionTournamentApplication>);
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class CompetitionTeamsClient
  {
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public CompetitionTeamsClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
      {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
      });
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>Create a Team for a Competition</summary>
    /// <param name="payload">Team Payload</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task CreateTeamAsync(TeamCreate payload, string competitionId)
    {
      return CreateTeamAsync(payload, competitionId, System.Threading.CancellationToken.None);
    }

    /// <summary>Create a Team for a Competition</summary>
    /// <param name="payload">Team Payload</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    public async System.Threading.Tasks.Task CreateTeamAsync(TeamCreate payload, string competitionId, System.Threading.CancellationToken cancellationToken)
    {
      if (competitionId == null)
        throw new System.ArgumentNullException("competitionId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append("competitions/{competitionId}/teams");
      urlBuilder_.Replace("{competitionId}", System.Uri.EscapeDataString(ConvertToString(competitionId, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = ((int)response_.StatusCode).ToString();
            if (status_ == "201")
            {
              return;
            }
            else
            if (status_ == "400")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "404")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ == "409")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              var result_ = default(BaseError);
              try
              {
                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(responseData_, _settings.Value);
              }
              catch (System.Exception exception_)
              {
                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
              }
              throw new SwaggerException<BaseError>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
            }
            else
            if (status_ != "200" && status_ != "204")
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
            }
          }
          finally
          {
            if (response_ != null)
              response_.Dispose();
          }
        }
      }
      finally
      {
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value is System.Enum)
      {
        string name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value;
            }
          }
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value != null && value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      return System.Convert.ToString(value, cultureInfo);
    }
  }



  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class CompetitionDetail
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Slug { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("titleCardURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TitleCardURL { get; set; }

    [Newtonsoft.Json.JsonProperty("maxTeamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? MaxTeamSize { get; set; }

    [Newtonsoft.Json.JsonProperty("minTeamSize", Required = Newtonsoft.Json.Required.Always)]
    public int MinTeamSize { get; set; }

    [Newtonsoft.Json.JsonProperty("rulesSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RulesSlug { get; set; }

    [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CompetitionGame Game { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompetitionDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class CompetitionGame
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompetitionGame FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionGame>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class ProblemDetails
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Status { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProblemDetails FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class BaseError
  {
    [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Error { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static BaseError FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseError>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamDetail
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Slug { get; set; }

    [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Abbreviation { get; set; }

    [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TeamMembership> Members { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TeamState State { get; set; }

    [Newtonsoft.Json.JsonProperty("logoURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LogoURL { get; set; }

    [Newtonsoft.Json.JsonProperty("competition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TeamCompetitionDetail Competition { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamMembership
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Role { get; set; }

    [Newtonsoft.Json.JsonProperty("memberSince", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset MemberSince { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamMembership FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamMembership>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum TeamState
  {
    [System.Runtime.Serialization.EnumMember(Value = @"active")]
    Active = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"disbanded")]
    Disbanded = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamCompetitionDetail
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamCompetitionDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamCompetitionDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileCreate
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileCreate FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileCreate>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileDetail
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    [Newtonsoft.Json.JsonProperty("avatarURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AvatarURL { get; set; }

    [Newtonsoft.Json.JsonProperty("memberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TeamTeamMembership> Memberships { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamTeamMembership
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Role { get; set; }

    [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Permissions { get; set; }

    [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UserProfileTamMembershipTeamData Team { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamTeamMembership FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamTeamMembership>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileTamMembershipTeamData
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Slug { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("competition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UserProfileTeamMembershipCompetitionData Competition { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileTamMembershipTeamData FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileTamMembershipTeamData>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileTeamMembershipCompetitionData
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Slug { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileTeamMembershipCompetitionData FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileTeamMembershipCompetitionData>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileConnectionDetail
  {
    [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExternalProvider Provider { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExternalId { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileConnectionDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileConnectionDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum ExternalProvider
  {
    [System.Runtime.Serialization.EnumMember(Value = @"discord")]
    Discord = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"battle.net")]
    BattleNet = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"twitch")]
    Twitch = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileCreateConnection
  {
    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserId { get; set; }

    [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExternalId { get; set; }

    [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExternalProvider Provider { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileCreateConnection FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileCreateConnection>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamTeamInvite
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset CreatedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid TeamId { get; set; }

    [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Team { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public InviteState State { get; set; }

    [Newtonsoft.Json.JsonProperty("competitionSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CompetitionSlug { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamTeamInvite FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamTeamInvite>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum InviteState
  {
    [System.Runtime.Serialization.EnumMember(Value = @"pending")]
    Pending = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"accepted")]
    Accepted = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"declined")]
    Declined = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"withdrawn")]
    Withdrawn = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class CompetitionTournamentApplication
  {
    [Newtonsoft.Json.JsonProperty("tournament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CompetitionTournamentApplicationTournamentData Tournament { get; set; }

    [Newtonsoft.Json.JsonProperty("signupOpenDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? SignupOpenDate { get; set; }

    [Newtonsoft.Json.JsonProperty("signupCloseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? SignupCloseDate { get; set; }

    [Newtonsoft.Json.JsonProperty("applicationRequired", Required = Newtonsoft.Json.Required.Always)]
    public bool ApplicationRequired { get; set; }

    [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CompetitionTournamentApplicationQuestion> Questions { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompetitionTournamentApplication FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionTournamentApplication>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class CompetitionTournamentApplicationTournamentData
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("tokenImageURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TokenImageURL { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompetitionTournamentApplicationTournamentData FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionTournamentApplicationTournamentData>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class CompetitionTournamentApplicationQuestion
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("question", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Question { get; set; }

    [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public FieldType FieldType { get; set; }

    [Newtonsoft.Json.JsonProperty("selectOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> SelectOptions { get; set; }

    [Newtonsoft.Json.JsonProperty("optional", Required = Newtonsoft.Json.Required.Always)]
    public bool Optional { get; set; }

    [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DefaultValue { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompetitionTournamentApplicationQuestion FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionTournamentApplicationQuestion>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum FieldType
  {
    [System.Runtime.Serialization.EnumMember(Value = @"string")]
    String = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"select")]
    Select = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
    Boolean = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"integer")]
    Integer = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
    Decimal = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class UserProfileTeamInvite
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset CreatedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public InviteState State { get; set; }

    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static UserProfileTeamInvite FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileTeamInvite>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamInviteRequest
  {
    [Newtonsoft.Json.JsonProperty("invitee", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Invitee { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamInviteRequest FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamInviteRequest>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TournamentTournamentApplication
  {
    [Newtonsoft.Json.JsonProperty("tournamentId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid TournamentId { get; set; }

    [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid TeamId { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TournamentApplicationState State { get; set; }

    [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TournamentApplicationQuestionAnswer> Answers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TournamentTournamentApplication FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentTournamentApplication>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum TournamentApplicationState
  {
    [System.Runtime.Serialization.EnumMember(Value = @"pending")]
    Pending = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"accepted")]
    Accepted = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"declined")]
    Declined = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"withdrawn")]
    Withdrawn = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TournamentApplicationQuestionAnswer
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("answer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Answer { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TournamentApplicationQuestionAnswer FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentApplicationQuestionAnswer>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TournamentTeamTournamentApplicationRequest
  {
    [Newtonsoft.Json.JsonProperty("tournamentId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid TournamentId { get; set; }

    [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TournamentApplicationQuestionAnswer> Answers { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TournamentTeamTournamentApplicationRequest FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentTeamTournamentApplicationRequest>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class CompetitionTournamentDetail
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? StartDate { get; set; }

    [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? EndDate { get; set; }

    [Newtonsoft.Json.JsonProperty("applicationRequired", Required = Newtonsoft.Json.Required.Always)]
    public bool ApplicationRequired { get; set; }

    [Newtonsoft.Json.JsonProperty("canSignup", Required = Newtonsoft.Json.Required.Always)]
    public bool CanSignup { get; set; }

    [Newtonsoft.Json.JsonProperty("signupOpenDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? SignupOpenDate { get; set; }

    [Newtonsoft.Json.JsonProperty("signupCloseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset? SignupCloseDate { get; set; }

    [Newtonsoft.Json.JsonProperty("tokenImageURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TokenImageURL { get; set; }

    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TournamentState State { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CompetitionTournamentDetail FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<CompetitionTournamentDetail>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public enum TournamentState
  {
    [System.Runtime.Serialization.EnumMember(Value = @"pending")]
    Pending = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"preSeason")]
    PreSeason = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"active")]
    Active = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"postSeason")]
    PostSeason = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"concluded")]
    Concluded = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.11.0 (Newtonsoft.Json v11.0.0.0)")]
  public partial class TeamCreate
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("invites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Invites { get; set; }

    [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Abbreviation { get; set; }

    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static TeamCreate FromJson(string data)
    {
      return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamCreate>(data);
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class SwaggerException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0))")]
  public partial class SwaggerException<TResult> : SwaggerException
  {
    public TResult Result { get; private set; }

    public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
      Result = result;
    }
  }

#pragma warning restore
}