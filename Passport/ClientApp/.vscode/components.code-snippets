{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "component.sfc": {
    "prefix": "sfc",
    "body": [
      "import classNames from 'classnames';",
      "import * as React from 'react';\n",
      "export interface PublicProps {}\n",
      "export const ${1:Name}: React.SFC<PublicProps> = (props) => {",
      "\tconst classes = classNames('$2');",
      "\treturn <${3:div} className={classes}>{props.children}</$3>;",
      "};\n"
    ]
  },
  "component.class": {
    "prefix": "component",
    "body": [
      "import classNames from 'classnames';",
      "import * as React from 'react';\n",
      "export interface PublicProps {}\n",
      "type Props = PublicProps;\n",
      "class ${1:Name}Component extends React.Component<Props> {",
      "\trender() {",
      "\t\tconst classes = classNames('${2:classes}')",
      "\t\treturn <${3:div} className={classes}>{this.props.children}</$3>;",
      "\t}",
      "}\n",
      "export const $1: React.ComponentClass<PublicProps> = $1Component;\n"
    ]
  },
  "component.page": {
    "prefix": "page",
    "body": [
      "import classNames from 'classnames';",
      "import * as React from 'react';\n",
      "import { RouteComponentProps } from 'react-router';\n",
      "type Props = RouteComponentProps;\n",
      "class ${1:Name}PageComponent extends React.Component<Props> {",
      "\trender() {",
      "\t\tconst classes = classNames('${2:classes}')",
      "\t\treturn <${3:div} className={classes}>{this.props.children}</$3>;",
      "\t}",
      "}\n",
      "export const $1Page: React.ComponentClass<RouteComponentProps> = $1PageComponent;\n"
    ]
  },
  "component.index": {
    "prefix": "index",
    "body": ["export * from './component';\n"]
  }
}
